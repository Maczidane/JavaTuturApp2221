<resources>
    <string name="app_name">Java Tutor App</string>
    <string name="nav_home">Home</string>
    <string name="nav_questions">Questions</string>
    <string name="nav_settings">Settings</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

    <string name="basic">Java Basics</string>
    <string name="advance">Java Advanced Concepts</string>
    <string name="ordinary">Start Learning the Basics of Java Programming</string>
    <string name="advanced">Learn Advance concepts of Java Programming</string>
    <string name="exit">Exit App</string>
    <string name="Help">Help</string>
    <string name="contact">Contact Admin</string>
    <string name="policy">Terms of Service</string>

    <string name="basic_1">Java – Basic Syntax</string>
    <string name="basic_2">Java – Variable types</string>
    <string name="basic_3">Java – Basic Data types</string>
    <string name="basic_4">Java –  Numbers</string>
    <string name="basic_5">Java – Characters</string>
    <string name="basic_6">Java – Strings</string>
    <string name="basic_7">Java – Arrays</string>
    <string name="basic_8">Java – Objects and Classes</string>
    <string name="basic_9">Java – Constructors</string>
    <string name="basic_10">Java – Modifier types</string>
    <string name="basic_11">Java – Loop Control (if, if…else, else..if, etc.,)</string>
    <string name="basic_12">Java – Decision Making</string>
    <string name="basic_13">Java – Date and Time</string>
    <string name="basic_14">Java – Regular Expressions</string>

    <string name="basic_15">Go To  Java Advanced Tutorials</string>


    <string name="advanced_1">Java – Methods</string>
    <string name="advanced_2">Java – Files and I/O</string>
    <string name="advanced_3">Java – Exceptions</string>
    <string name="advanced_4">Java –  Inner class</string>
    <string name="advanced_5">Java – Inheritance</string>
    <string name="advanced_6">Java – Polymorphism</string>
    <string name="advanced_7">Java – Abstraction</string>
    <string name="advanced_8">Java – Encapsulation</string>
    <string name="advanced_9">Java – Overriding</string>
    <string name="advanced_10">Java – Interfaces</string>

    <string name="score_0">Score : 0</string>
    <string name="questions_1_x">Questions: 1/x</string>
    <string name="_00_30">00:30</string>
    <string name="option_1">Option 1</string>
    <string name="confirm">Confirm</string>

    <string name="advanced_11">Java – Packages</string>

    <string name="score">Score : 0</string>
    <string name="level">Level : </string>
    <string name="scoreresult">Score : </string>
    <string name="zero"> 0 </string>
    <string name="change">Change Subject </string>
    <string name="grade">Grade : </string>
    <string name="passed">Passed</string>
    <string name="naming_subject">Subject Name : </string>
    <string name="questionaire">Dummy question ?</string>
    <string name="timeLabel">Time Left : </string>
    <string name="question">Question : 1/x</string>
    <string name="time">30 sec</string>
    <string name="btn">Confrim</string>
    <string name="snackbar">Now Playing Song in background</string>
    <string name="turnOff">TurnOff</string>
    <string name="background">Background Music has been Switched Off</string>


    <string name="advanced_12">Java – Data Structures</string>
    <string name="advanced_13">Java – Networking</string>
    <string name="advanced_14">Java – Sending Emails</string>
    <string name="java_basics">Java Basics</string>
    <string name="java_advanced">Java Advanced</string>
    <string name="sample_programs">Sample Programs</string>
    <string name="see_sample_programs">See Sample Programs and  \n learn from them</string>
    <string name="tutorials">Questions</string>
    <string name="see_learn_tutorials_in_java_programming_both_basic_and_advanced_concepts">  \n  Learn from tutorials in Java \n programming</string>
    <string name="get_help_on_how_to_use_this_app_and_other_issues">Get Help on how to use \n this App and other issues</string>
    <string name="if_you_like_app_n_take_a_minute_to_share_n_app_with_friends">If you like app? \n Take a minute to share \n app with friends</string>
    <string name="java_introduction">Java - Introduction</string>
    <string name="previous">Previous</string>
    <string name="next">Next</string>
    <string name="prerequisites">Prerequisites</string>
    <string name="this_tutorial_has_been_prepared_for_the_beginners_to_help_them_understand_the_basic_to_advanced_concepts_related_to_java_programming_language">This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language.</string>
    <string name="audience">Audience</string>
    <string name="java_is_a_high_level_programming_language_originally_developed_by_sun_microsystems_and_released_in_1995_java_runs_on_a_variety_of_platforms_such_as_windows_mac_os_and_the_various_versions_of_unix_this_tutorial_gives_a_complete_understanding_of_java_this_reference_will_take_you_through_simple_and_practical_approaches_while_learning_java_programming_language">Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language.</string>
    <string name="basic_syntax_text_1">When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other\'s methods. Let us now briefly look into what do class, object, methods, and instance variables mean. </string>
    <string name="objects">Objects</string>
    <string name="object_des">Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.</string>
    <string name="class_1">Class</string>
    <string name="class_1_des">A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.</string>
    <string name="methods">Methods</string>
    <string name="method_des">A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed</string>
    <string name="variables">Instance Variables</string>
    <string name="variables_des">Each object has its unique set of instance variables. An object\'s state is created by the values assigned to these instance variables.</string>
    <string name="first_java_program">First Java Program</string>
    <string name="print_hello_world">Let us look at a simple code that will print the words <b> Hello World </b>.</string>
    <string name="example_1">Example</string>
    <string name="example_1_des">public class MyFirstJavaProgram {\n

   /* This is my first java program. \n
    * This will print \'Hello World\' as the output\n
    */\n

  \t public static void main(String [ ]args) {\n
      System.out.println("Hello World"); // prints Hello World\n
   }
}
    </string>
    <string name="date_1">Java provides the Date class available in java.util package, this class encapsulates the current date and time. The Date class supports two constructors as shown below: \n <b> 1) Date( )</b> \n This constructor initializes the object with the current date and time. \n\n <b> 2) Date(long millisec)</b> \n</string>
    <string name="date_2">Following are the methods of the date class: \n <b> 1) boolean after(Date date)</b> \n Returns true if the invoking Date object contains a date that is later than the one specified by date, otherwise, it returns false. \n\n <b> 2) boolean before(Date date)</b> \n Returns true if the invoking Date object contains a date that is earlier than the one specified by date, otherwise, it returns false. \n\n <b> 3) Object clone( ) </b> \n Duplicates the invoking Date object. \n\n <b> 4) int compareTo(Date date)</b> \n Compares the value of the invoking object with that of date. Returns 0 if the values are equal. Returns a negative value if the invoking object is earlier than date. Returns a positive value if the invoking object is later than date.\n\n</string>
    <string name="date_3"><b> 5) int compareTo(Object obj)</b> \n Operates identically to compareTo(Date) if obj is of class Date. Otherwise, it throws a ClassCastException. \n\n <b> 6) boolean equals(Object date)</b> \n Returns true if the invoking Date object contains the same time and date as the one specified by date, otherwise, it returns false.\n\n <b> 7) long getTime( )</b> \n Returns the number of milliseconds that have elapsed since January 1, 1970. \n\n <b> 8) int hashCode( )</b>  \n Returns a hash code for the invoking object. \n\n <b> 9) void setTime(long time)</b> \n Sets the time and date as specified by time, which represents an elapsed time in milliseconds from midnight, January 1, 1970. \n\n <b> 10) String toString( )</b> \n Converts the invoking Date object into a string and returns the result. \n\n  </string>
    <string name="date_4">Getting Current Date and Time</string>
    <string name="date_5">This is a very easy method to get current date and time in Java. You can use a simple Date object with toString() method to print the current date and time as follows −</string>
    <string name="date_6">import java.util.Date;\n
public class DateDemo {\n

  \t public static void main(String args[ ]) { \n
      \t // Instantiate a Date object \n
      \t Date date = new Date(); \n \n

      \t // display time and date using toString() \n
      \t System.out.println(date.toString()); \n
   }
        \n
}
    </string>
    <string name="date_7">This will produce the following result − \n\n <b>Output</b> \n</string>
    <string name="date_8">on May 04 09:51:52 CDT 2009</string>
    <string name="date_9">Date Formatting Using SimpleDateFormat</string>
    <string name="date_10">SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting. \n\n\n <b>Example </b> \n</string>
    <string name="date_11">import java.util.*;\n
import java.text.*;\n

public class DateDemo {\n

  \t public static void main(String args[]) { \n
     \t Date dNow = new Date( ); \n
        \t SimpleDateFormat ft = new SimpleDateFormat ("E yyyy.MM.dd 'at' hh:mm:ss a zzz"); \n

    \t  System.out.println("Current Date: " + ft.format(dNow)); \n
 \t  } \n
}
    </string>
    <string name="date_12">This will produce the following result − \n\n <b>Output</b>\n </string>
    <string name="date_13">Current Date: Sun 2004.07.18 at 04:14:09 PM PDT</string>
    <string name="date_14"><b>Simple DateFormat Format Codes</b> \n\n o specify the time format, use a time pattern string. In this pattern, all ASCII letters are reserved as pattern letters, which are defined as the following −  </string>
    <string name="date_formatting_using_printf">Date Formatting Using printf  </string>
    <string name="date_18">import java.util.Date;\n
public class DateDemo {\n

   \tpublic static void main(String args[ ]) {\n
     \t // Instantiate a Date object\n
     \t Date date = new Date();\n

      \t // display time and date\n
      \t String str = String.format("Current Date/Time : %tc", date );\n

      \t System.out.printf(str);\n
   }\n
}

    </string>
    <string name="date_19">This will produce the following result − \n<b>Output</b> \n</string>
    <string name="date_20">Current Date/Time : Sat Dec 15 16:37:57 MST 2012</string>
    <string name="date_date">Date and time formatting can be done very easily using printf method. You use a two-letter format, starting with t and ending in one of the letters of the table as shown in the following code.\n<b>Example</b> \n</string>
    <string name="date_22">Date and Time Conversion Characters</string>
    <string name="date_26">There are other useful classes related to Date and time. For more details, you can refer to Java Standard documentation.</string>
    <string name="results_so_far">Results so far</string>
    <string name="variables_1">A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable\'s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable. You must declare all variables before they can be used. \n\n Following is the basic form of a variable declaration − \n\n <b>Example \n</b></string>

    <string name="variable_2">data type variable [ = value][, variable [ = value] ...] ;</string>
    <string name="variable_3">Here data type is one of Java\'s datatypes and variable is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list. Following are valid examples of variable declaration and initialization in Java −</string>

    <string name="variable_4">int a, b, c;         // Declares three ints, a, b, and c.\n
int a = 10, b = 10;  // Example of initialization\n
byte B = 22;         // initializes a byte type variable B.\n
double pi = 3.14159; // declares and assigns a value of PI.\n
char a = \'a\';        // the char variable a iis initialized with value \'a\'\n</string>
    <string name="variable_5">This chapter will explain various variable types available in Java Language. There are three kinds of variables in Java −  \n\n -Local variables\n - Instance variables\n - Class/Static variables</string>
    <string name="variable_6">Local Variables</string>
    <string name="variable_7"> \n - Local variables are declared in methods, constructors, or blocks. \n\n - Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block. \n\n - Access modifiers cannot be used for local variables.\n\n -  Local variables are visible only within the declared method, constructor, or block. Local variables are implemented at stack level internally.\n\n -  There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.\n\n <b> Example</b> \n\n
Here, age is a local variable. This is defined inside pupAge() method and its scope is limited to only this method. \n</string>

    <string name="variable_8">public class Test {\n
   \tpublic void pupAge() {\n
      \tint age = 0;\n
     \t age = age + 7;\n
      \t System.out.println("Puppy age is : " + age);\n
   \t}\n\n

  \t public static void main(String args[]) {\n
     \t Test test = new Test();\n
      \ttest.pupAge();\n
   }
}</string>
    <string name="variable_9">This will produce the following result − \n <b>Output</b>\n</string>
    <string name="variable_10">Puppy age is: 7</string>
    <string name="variable_11">Instance Variables</string>
    <string name="variable_12">\n - Instance variables are declared in a class, but outside a method, constructor or any block. When a space is allocated for an object in the heap, a slot for each instance variable value is created. \n - Instance variables are created when an object is created with the use of the keyword \'new\' and destroyed when the object is destroyed. \n - Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object\'s state that must be present throughout the class. \n - Instance variables can be declared in class level before or after use. \n - Access modifiers can be given for instance variables.\n - The instance variables are visible for all methods, constructors and block in the class.\n - Normally, it is recommended to make these variables private (access level). However, visibility for subclasses can be given for these variables with the use of access modifiers. \n - Instance variables have default values. For numbers, the default value is 0, for Booleans it is false, and for object references it is null. \n -  Values can be assigned during the declaration or within the constructor. \n - Instance variables can be accessed directly by calling the variable name inside the class. However, within static methods (when instance variables are given accessibility), they should be called using the fully qualified name. ObjectReference.VariableName.\n\
    \n <b>Example</b> \n</string>
    <string name="variable_13">\nimport java.io.*;\n
\tpublic class Employee {\n

   \t// this instance variable is visible for any child class.\n
   public String name;\n

   \t// salary  variable is visible in Employee class only.\n
   private double salary;\n

   \t// The name variable is assigned in the constructor.\n
   public Employee (String empName) {\n
      \tname = empName;\n
   }

  \t // The salary variable is assigned a value.\n
   public void setSalary(double empSal) {\n
      \tsalary = empSal;\n
   }

   \t// This method prints the employee details.\n
   \tpublic void printEmp() {\n
      \tSystem.out.println("name  : " + name );\n
      \tSystem.out.println("salary :" + salary);\n
   }

   \tpublic static void main(String args[]) {\n
      \tEmployee empOne = new Employee("Ransika");\n
      \tempOne.setSalary(1000);\n
      \tempOne.printEmp();\n
   }
}</string>
    <string name="variable_14">This will produce the following result − \n\n <b>Output</b> \n</string>
    <string name="variable_15">name  : Ransika\n
salary :1000.0\n</string>
    <string name="variable_16">Class/Static Variables</string>
    <string name="variable_17">\n - Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block.

\n - There would only be one copy of each class variable per class, regardless of how many objects are created from it.

\n - Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final, and static. Constant variables never change from their initial value.

\n - Static variables are stored in the static memory. It is rare to use static variables other than declared final and used as either public or private constants.

\n - Static variables are created when the program starts and destroyed when the program stops.

\n - Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.

\n - Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally, values can be assigned in special static initializer blocks.

\n - Static variables can be accessed by calling with the class name ClassName.VariableName.

\n - When declaring class variables as public static final, then variable names (constants) are all in upper case. If the static variables are not public and final, the naming syntax is the same as instance and local variables.</string>
    <string name="variable_18">import java.io.*;\n
\t public class Employee {\n

   // salary  variable is a private static variable\n
   \tprivate static double salary;\n

   // DEPARTMENT is a constant\n
   \tpublic static final String DEPARTMENT = "Development ";\n

   \tpublic static void main(String args[]) {\n
      \tsalary = 1000;\n
      \tSystem.out.println(DEPARTMENT + "average salary:" + salary);\n
   }
}</string>
    <string name="variable_19">This will produce the following result − \n\n  <b>Output</b> \n\n</string>
    <string name="variable_20">Development average salary:1000\\n</string>
    <string name="variable_22"><b>Note</b> − If the variables are accessed from an outside class, the constant should be accessed as Employee.DEPARTMENT\n\n</string>
    <string name="types_1">Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in the memory. \n\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.\n\n There are two data types available in Java :\n\n - Primitive Data Types\n\n - Reference/Object Data Types</string>
    <string name="type_2">Primitive Data Types</string>
    <string name="type_4"><b>short</b>\n\n - Short data type is a 16-bit signed two\'s complement integer\n  - Minimum value is -32,768 (-2^15) \n - Maximum value is 32,767 (inclusive) (2^15 -1)\n

 - Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an integer\n

 - Default value is 0. \n

 - Example: short s = 10000, short r = -20000\n</string>
    <string name="type_5"><b>long</b>\n\n - Long data type is a 64-bit signed two\'s complement integer\n
- Minimum value is -9,223,372,036,854,775,808(-2^63)\n
- Maximum value is 9,223,372,036,854,775,807 (inclusive)(2^63 -1)\n
- This type is used when a wider range than int is needed\n - Default value is 0L\n
 - Example: long a = 100000L, long b = -200000L\n\n</string>
    <string name="type_6"><b>float</b>\n\n
- Float data type is a single-precision 32-bit IEEE 754 floating point\n

- Float is mainly used to save memory in large arrays of floating point numbers\n

- Default value is 0.0f\n

- Float data type is never used for precise values such as currency\n

- Example: float f1 = 234.5f\n\n</string>
    <string name="type_7"><b>double</b>\n\n
- double data type is a double-precision 64-bit IEEE 754 floating point\n

- This data type is generally used as the default data type for decimal values, generally the default choice\n

- Double data type should never be used for precise values such as currency\n

- Default value is 0.0d\n

- Example: double d1 = 123.4\n</string>
    <string name="type_8"><b>boolean</b>\n\n
- boolean data type represents one bit of information\n
- There are only two possible values: true and false\n
- This data type is used for simple flags that track true/false conditions\n
- Default value is false\n
- Example: boolean one = true\n\n

<b>char</b>\n\n
- char data type is a single 16-bit Unicode character\n
- Minimum value is \'\u0000\' (or 0)\n
- Maximum value is \'\uffff\' (or 65,535 inclusive)\n
- Char data type is used to store any character\n
- Example: char letterA = \'A\'\n\n</string>
    <string name="type_11"> - Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, etc.\n

- Class objects and various type of array variables come under reference datatype.\n

- Default value of any reference variable is null.\n

- A reference variable can be used to refer any object of the declared type or any compatible type.\n

- Example: Animal animal = new Animal("giraffe");\n\n</string>

    <string name="type_3">There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail.\n\n <b>byte</b> \n\n - Byte data type is an 8-bit signed two\'s complement integer \n\n -  Minimum value is -128 (-2^7) \n\n - Maximum value is 127 (inclusive)(2^7 -1) \n\n - Default value is 0 \n\n - Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer. \n\n - Example: byte a = 100, byte b = -50</string>
    <string name="type_9">Reference Datatypes</string>
    <string name="textsize">25dp</string>
    <string name="type_12">Java Literals</string>
    <string name="type_13">A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.\n\n Literals can be assigned to any primitive type variable. For example − \n\n</string>
    <string name="type_14">byte a = 68;\n  char a = \'A\';\n</string>
    <string name="type_15">byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.\n\n Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example −\n\n</string>
    <string name="type_16">int decimal = 100;\n  int octal = 0144;\n  int hexa = 0x64;\n</string>
    <string name="type_18">\"Hello World\"\n
\"two\\nlines\"\n
\"\\"This is in quotes\\"\"\n</string>
    <string name="type_20">char a = \'\\u0001\';\n
String a = \"\\u0001\"\n;</string>
    <string name="type_17">String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are − \n\n <b>Example</b>\n\n</string>
    <string name="type_19">String and char types of literals can contain any Unicode characters. For example −\n</string>
    <string name="number_6">public class Test {\n

   public static void main(String args[]) {\n
      Integer x = 5; // boxes int to an Integer object\n
      x =  x + 10;   // unboxes the Integer to a int\n
      System.out.println(x); \n
   }
}</string>
    <string name="turnOff1">TURN OFF</string>
    <string name="type_22">Java language supports few special escape sequences for String and char literals as well. They are −</string>
    <string name="number_1">Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc.\n\n <b>Example</b>\n\n</string>
    <string name="number_2">int i = 5000;\n float gpa = 13.65;\n double mask = 0xaf;\n</string>
    <string name="number_3">However, in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides <b>wrapper classes</b>.\n\n All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number.</string>
    <string name="number_5">The object of the wrapper class contains or wraps its respective primitive data type. Converting primitive data types into object is called boxing, and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.\n\n And the Wrapper object will be converted back to a primitive data type, and this process is called unboxing. The <b>Number</b> class is part of the java.lang package.\n\n Following is an example of boxing and unboxing − \n\n <b>Example</b></string>
    <string name="number_7">This will produce the following result −\n\n <b>Output</b></string>
    <string name="number_8">15</string>
    <string name="number_9">When x is assigned an integer value, the compiler boxes the integer because x is integer object. Later, x is unboxed so that they can be added as an integer.</string>
    <string name="number_11">Number Methods</string>
    <string name="number_12">Following is the list of the instance methods that all the subclasses of the Number class implements − \n\n</string>
    <string name="character_1">Normally, when we work with characters, we use primitive data types char.\n\n <b>Example</b>\n</string>
    <string name="character_2">char ch = \'a\';\n

// Unicode for uppercase Greek omega character\n
char uniChar = \'\\u039A\'; \n

// an array of chars\n
char[] charArray ={ \'a\', \'b\', \'c\', \'d\', \'e\' };\n </string>
    <string name="character_4">Character ch = new Character(\'a\');</string>
    <string name="character_3">However in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides wrapper class <b>Character</b> for primitive data type char.\n\n The Character class offers a number of useful class (i.e., static) methods for manipulating characters. You can create a Character object with the Character constructor − \n\n</string>
    <string name="character_5">The Java compiler will also create a Character object for you under some circumstances. For example, if you pass a primitive char into a method that expects an object, the compiler automatically converts the char to a Character for you. This feature is called autoboxing or unboxing, if the conversion goes the other way. \n\n <b>Example</b>\n</string>
    <string name="character_6">// Here following primitive char \'a\'\n
// is boxed into the Character object ch\n
Character ch = \'a\';\n

// Here primitive \'x\' is boxed for method test,\n
// return is unboxed to char \'c\'\n
char c = test(\'x\');\n</string>
    <string name="character_7">Escape Sequences</string>
    <string name="character_8">A character preceded by a backslash (\\) is an escape sequence and has a special meaning to the compiler.\n\n The newline character (\\n ) has been used frequently in this tutorial in System.out.println() statements to advance to the next line after the string is printed.\n\n Following table shows the Java escape sequences − </string>
    <string name="character_11">When an escape sequence is encountered in a print statement, the compiler interprets it accordingly.\n\n

<b>Example</b> \n\n
If you want to put quotes within quotes, you must use the escape sequence, \\", on the interior quotes − \n\n</string>

    <string name="character_12">public class Test {\n

   public static void main(String args[]) {\n
      System.out.println(\"She said \\\"Hello!\\\" to me.\");\n
   }
}
    </string>
    <string name="character_13">This will produce the following result − \n\n <b>Output</b>\n</string>

    <string name="character_14">She said \"Hello!\" to me.</string>
    <string name="character_15">Character Methods</string>
    <string name="character_16">Following is the list of the important instance methods that all the subclasses of the Character class implement −\n\n  </string>
    <string name="hint">Hint</string>
    <string name="save">Save</string>
    <string name="string_1">Strings, which are widely used in Java programming, are a sequence of characters. In Java programming language, strings are treated as objects.\n\n The Java platform provides the String class to create and manipulate strings.</string>
    <string name="string_2">Creating Strings</string>
    <string name="string_3">The most direct way to create a string is to write −</string>
    <string name="string_4">String greeting = \"Hello world!\";</string>
    <string name="string_5">Whenever it encounters a string literal in your code, the compiler creates a String object with its value in this case, \"Hello world!\'.\n\n

As with any other object, you can create String objects by using the new keyword and a constructor. The String class has 11 constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.\n\n

<b>Example</b>\n</string>
    <string name="string_6">public class StringDemo {

   \tpublic static void main(String args[]) {\n
      \tchar[] helloArray = { \'h\', \'e\', \'l\', \'l\', \'o\', \'.\' };\n
      \tString helloString = new String(helloArray);\n
      \tSystem.out.println( helloString );\n
   }
}</string>
    <string name="string_7">This will produce the following result −\n\n

<b>Output</b>\n</string>
    <string name="string_8">hello.</string>
    <string name="string_9"><b>Note</b> − The String class is immutable, so that once it is created a String object cannot be changed. If there is a necessity to make a lot of modifications to Strings of characters, then you should use String Buffer and String Builder Classes.\n</string>
    <string name="string_10">String Length</string>
    <string name="string_11">Methods used to obtain information about an object are known as <b>accessor methods</b>. One accessor method that you can use with strings is the length() method, which returns the number of characters contained in the string object.\n\n The following program is an example of <b>length()</b>, method String class.\n\n <b>Example</b>\n</string>
    <string name="string_12">public class StringDemo {\n

   \tpublic static void main(String args[]) {\n
      \tString palindrome = \"Dot saw I was Tod\";\n
      \tint len = palindrome.length();\n
      \tSystem.out.println( \"String Length is : \" + len );\n
   }
}</string>
    <string name="string_14">This will produce the following result −  <b>Output</b>\n\n</string>
    <string name="string_15">String Length is : 17</string>
    <string name="string_16">Concatenating Strings</string>
    <string name="string_18">The String class includes a method for concatenating two strings − \n</string>
    <string name="string_19">string1.concat(string2);</string>
    <string name="string_20">This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in −\n</string>
    <string name="string_21">\"My name is \".concat(\"Zara\");</string>
    <string name="string_22">Strings are more commonly concatenated with the + operator, as in −\n</string>
    <string name="string_23">\"Hello,\" + \" world\" + \"!\"</string>
    <string name="string_24">which results in − \n</string>
    <string name="string_25">\"Hello, world!\"</string>
    <string name="string_26">Creating Format Strings</string>
    <string name="string_27">You have printf() and format() methods to print output with formatted numbers. The String class has an equivalent class method, format(), that returns a String object rather than a PrintStream object.\n\n  Using String\'s static format() method allows you to create a formatted string that you can reuse, as opposed to a one-time print statement. For example, instead of − \n  <b>Example</b>\n\n</string>
    <string name="string_28">System.out.printf(\"The value of the float variable is \" +\n
                 \t \"%f, while the value of the integer \" +\n
                  \t \"variable is %d, and the string \" +\n
                \t  \"is %s\", floatVar, intVar, stringVar);</string>
    <string name="string_29">String Methods</string>
    <string name="string_30">Here is the list of methods supported by String class − \n\n</string>
    <string name="loop_1">There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.\n\n Programming languages provide various control structures that allow for more complicated execution paths. \n\n A <b>loop</b> statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages −</string>
    <string name="loop_3">Java programming language provides the following types of loop to handle looping requirements. Click the following links to check their detail.</string>
    <string name="loop_5">Loop Control Statements</string>
    <string name="loop_6">Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.\n\n Java supports the following control statements. Click the following links to check their detail.</string>
    <string name="loop_8">Enhanced for loop in Java</string>
    <string name="loop_9">As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.\n\n <b>Syntax</b> \n\n Following is the syntax of enhanced for loop −\n</string>
    <string name="loop_11">for(declaration : expression) {\n
   \t // Statements\n
}</string>
    <string name="loop_12"><b>Declaration </b> \n\n− The newly declared block variable, is of a type compatible with the elements of the array you are accessing. The variable will be available within the for block and its value would be the same as the current array element.\n\n

<b>Expression</b>\n\n − This evaluates to the array you need to loop through. The expression can be an array variable or method call that returns an array.\n</string>
    <string name="loop_13"><b>Example</b>\n\n</string>
    <string name="loop_14">public class Test {\n

  \t public static void main(String args[]) {\n
    \t  int [] numbers = {10, 20, 30, 40, 50};\n

    \t  for(int x : numbers ) {\n
      \t   System.out.print( x );\n
     \t    System.out.print(",");\n
      }\n
      \t System.out.print("\n");\n
    \t  String [] names = {"James", "Larry", "Tom", "Lacy"};\n

     \t for( String name : names ) {\n
      \t   System.out.print( name );\n
        \t System.out.print(",");\n
    \t  }
   }</string>
    <string name="loop_15">This will produce the following result −\n\n  <b>Output</b>\n\n</string>
    <string name="loop_16">10, 20, 30, 40, 50,\n
James, Larry, Tom, Lacy,</string>
    <string name="array_1">Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.\n\n Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables.\n\n This tutorial introduces how to declare array variables, create arrays, and process arrays using indexed variables.</string>
    <string name="arrays_2">Declaring Array Variables</string>
    <string name="array_3">To use an array in a program, you must declare a variable to reference the array, and you must specify the type of array the variable can reference. Here is the syntax for declaring an array variable − \n\n  <b>Syntax</b> \n\n</string>
    <string name="array_4">dataType[ ] arrayRefVar;   // preferred way.\n
or\n
dataType arrayRefVar[ ];  // works but not preferred way.\n</string>
    <string name="array_5"><b>Note</b> − The style <b>dataType[] arrayRefVar</b> is preferred. The style <b>dataType arrayRefVar[]</b>  comes from the C/C++ language and was adopted in Java to accommodate C/C++ programmers.\n\n

        <b>Example</b>\n\n
The following code snippets are examples of this syntax − \n</string>
    <string name="array_6">double[] myList;   // preferred way.\n
or\n
double myList[];   // works but not preferred way.\n</string>
    <string name="array_7">Creating Arrays</string>
    <string name="array_8">You can create an array by using the new operator with the following syntax − \n\n<b>Syntax</b> \n\n</string>
    <string name="array_9">arrayRefVar = new dataType[arraySize];</string>
    <string name="array_10">The above statement does two things −\n\n

\t - It creates an array using new dataType[arraySize].\n\n

\t - It assigns the reference of the newly created array to the variable arrayRefVar.\n\n

Declaring an array variable, creating an array, and assigning the reference of the array to the variable can be combined in one statement, as shown below −</string>
    <string name="array_11">dataType[] arrayRefVar = new dataType[arraySize];</string>
    <string name="array_12">Alternatively you can create arrays as follows −</string>
    <string name="array_13">dataType[] arrayRefVar = {value0, value1, ..., valuek};</string>
    <string name="array_14">The array elements are accessed through the <b>index</b>. Array indices are 0-based; that is, they start from 0 to <b>arrayRefVar.length-1</b>.\n\n <b>Example</b>\n\n Following statement declares an array variable, myList, creates an array of 10 elements of double type and assigns its reference to myList −\n\n</string>
    <string name="array_15">double[] myList = new double[10];</string>
    <string name="array_16">Following picture represents array myList. Here, myList holds ten double values and the indices are from 0 to 9.</string>
    <string name="array_18">Processing Arrays</string>
    <string name="array_19">When processing array elements, we often use either for <b>loop</b> or <b>foreach</b> loop because all of the elements in an array are of the same type and the size of the array is known.\n\n <b>Example</b>\n\n Here is a complete example showing how to create, initialize, and process arrays −</string>
    <string name="array_20"><![CDATA[public class TestArray {\n

  \t public static void main(String[] args) {\n
      \tdouble[] myList = {1.9, 2.9, 3.4, 3.5};\n

     \t // Print all the array elements\n
      \tfor (int i = 0; i < myList.length; i++) {\n
         \tSystem.out.println(myList[i] + \" \");\n
      }\n

      \t// Summing all elements\n
      \tdouble total = 0;\n
      \tfor (int i = 0; i < myList.length; i++) {\n
        \t total += myList[i];\n
      \t}\n
      \tSystem.out.println("Total is " + total);\n

     \t // Finding the largest element\n
      \tdouble max = myList[0];\n
      \tfor (int i = 1; i < myList.length; i++) {\n
        \t if (myList[i] > max) max = myList[i];\n
     \t }\n
      \tSystem.out.println(\"Max is \" + max); \n
  \t }
}]]></string>
    <string name="array_21">This will produce the following result −\n\n <b>Output</b>\n</string>
    <string name="array_22">1.9\n 2.9\n 3.4\n 3.5\n Total is 11.7\n Max is 3.5\n</string>
    <string name="array_23">The foreach Loops</string>
    <string name="array_24">JDK 1.5 introduced a new for loop known as foreach loop or enhanced for loop, which enables you to traverse the complete array sequentially without using an index variable.\n\n <b>Example</b>\n\n The following code displays all the elements in the array myList −</string>
    <string name="array_25">public class TestArray {\n

   \tpublic static void main(String[] args) {\n
      \tdouble[] myList = {1.9, 2.9, 3.4, 3.5};\n

      \t// Print all the array elements\n
      \tfor (double element: myList) {\n
         \tSystem.out.println(element);\n
      \t}\n
   }
}</string>
    <string name="array_26">This will produce the following result −\n\n <b>Output</b>\n\n</string>
    <string name="array_27">1.9\n 2.9\n 3.4\n 3.5\n</string>
    <string name="array_28">The Arrays Class</string>
    <string name="array_29">The java.util.Arrays class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements. These methods are overloaded for all primitive types.</string>
    <string name="objects_1">Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts −\n\n - Polymorphism\n -Inheritance\n - Encapsulation\n - Abstraction\n - Classes\n - Objects\n - Instance\n - Method\n - Message Passing\n\n In this chapter, we will look into the concepts : Classes and Objects.\n\n

<b>Object</b> − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.\n\n

<b>Class</b> − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.\n</string>
    <string name="objects_2">Objects in Java</string>
    <string name="objetcs_3">Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.\n\n If we consider a dog, then its state is - name, breed, color, and the behavior is\n - barking, wagging the tail, running.\n\n If you compare the software object with a real-world object, they have very similar characteristics.\n\n Software objects also have a state and a behavior. A software object\'s state is stored in fields and behavior is shown via methods.\n\n So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods.\n</string>
    <string name="objects_4">Classes in Java</string>
    <string name="objects_5">A class is a blueprint from which individual objects are created.\n\n Following is a sample of a class.\n\n <b>Example</b>\n</string>
    <string name="objects_6">public class Dog {\n
        \tString breed; int age;\n
        \tString color;\n
        \tvoid barking() {\n

        \t} \n
        \tvoid hungry() {\n

        \t}\n
        \tvoid sleeping()\n
        \t{\n

        \t} \n
        }</string>
    <string name="objects_7">A class can contain any of the following variable types: \n\n <b>Local variables</b> − Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.\n\n <b>Instance variables</b> − Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.\n\n <b>Class variables</b> − Class variables are variables declared within a class, outside any method, with the static keyword.\n\n A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.\n\n Following are some of the important topics that need to be discussed when looking into classes of the Java Language.\n</string>
    <string name="objects_8">Constructors</string>
    <string name="objects_9">When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.\n\n Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor. Following is an example of a constructor − <b>Example</b>\n\n</string>
    <string name="objects_10">public class Puppy {\n
        \tpublic Puppy() {\n
        }\n
       \t public Puppy(String name) {\n
        \t// This constructor has one parameter, name.\n
        } \n
        }</string>
    <string name="object_11">Java also supports Singleton Classes where you would be able to create only one instance of a class.\n\n <b>Note</b> − We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters.\n</string>
    <string name="objects_12">Creating an Object</string>
    <string name="objects_13">As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.\n\n There are three steps when creating an object from a class: \n\n − <b>Declaration</b> − A variable declaration with a variable name with an object type.\n\n - <b>Instantiation </b>− The \'new\' keyword is used to create the object.\n\n <b>Initialization</b> − The \'new\' keyword is followed by a call to a constructor. This call initializes the new object.\n\n Following is an example of creating an object −\n\n <b>Example</b>\n\n</string>
    <string name="objects_14">public class Puppy {\n
   \tpublic Puppy(String name) {\n
     \t // This constructor has one parameter, name.\n
     \t System.out.println(\"Passed Name is :\" + name );\n
   \t}

   \tpublic static void main(String []args) {\n
      \t// Following statement would create an object myPuppy\n
     \t Puppy myPuppy = new Puppy( \"tommy\" );\n
   \t}\n
}</string>
    <string name="objects_15">If we compile and run the above program, then it will produce the following result −\n\n <b>Output</b>\n\n</string>
    <string name="objects_16">Passed Name is :tommy</string>
    <string name="objects_17">Accessing Instance Variables and Methods</string>
    <string name="objects_18">Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path −</string>
    <string name="objects_19">/* First create an object */ \nObjectReference = new Constructor();\n /* Now call a variable as follows */\n ObjectReference.variableName; \n/* Now you can call a class method as follows */ \nObjectReference.MethodName();\n</string>
    <string name="constructor_1">A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.\n\n Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other start-up procedures required to create a fully formed object.\n\n All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.\n</string>
    <string name="constructor_2">Syntax</string>
    <string name="constructor_3">Following is the syntax of a constructor −</string>
    <string name="constructor_4">class ClassName {\n
        \tClassName() {\n
        \t}\n
        }</string>
    <string name="constructor_5">Java allows two types of constructors namely :\n\n - No argument Constructors\n\n - Parameterized Constructors\n</string>
    <string name="constructor_6">No argument Constructors</string>
    <string name="constructor_7">As the name specifies the no argument constructors of Java does not accept any parameters instead, using these constructors the instance variables of a method will be initialized with fixed values for all objects.\n\n <b>Example</b>\n\n</string>
    <string name="constructor_8">Public class MyClass {\n
        \tInt num;\n
        \tMyClass() {\n
        \tnum = 100;\n
        \t}\n
        }</string>
    <string name="constructor_9">You would call constructor to initialize objects as follows</string>
    <string name="constructor_10">public class ConsDemo {\n
   \tpublic static void main(String args[]) {\n
     \t MyClass t1 = new MyClass();\n
     \t MyClass t2 = new MyClass();\n
     \t System.out.println(t1.num + \" \" + t2.num);\n
   \t}
}</string>
    <string name="constructor_11">This would produce the following result</string>
    <string name="constructor_12">100 100</string>
    <string name="constructor_13">Parameterized Constructors</string>
    <string name="constructor_14">Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor\'s name.\n\n <b>Example</b>\n\n Here is a simple example that uses a constructor −\n\n</string>
    <string name="constructor_15">// A simple constructor.\n class MyClass {\n
        \tint x;\n
        \t// Following is the constructor\n
        \tMyClass(int i ) {\n
        \tx = i;\n
        \t}\n
        }</string>
    <string name="constructor_16">You would call constructor to initialize objects as follows −</string>
    <string name="constructor_17">public class ConsDemo {\n
   \tpublic static void main(String args[]) {\n
      \tMyClass t1 = new MyClass( 10 );\n
      \tMyClass t2 = new MyClass( 20 );\n
      \tSystem.out.println(t1.x + " " + t2.x);\n
   }\n
}</string>
    <string name="constructor_18">This would produce the following result −</string>
    <string name="constructor_19">10 20</string>
    <string name="modifiers_1">Modifiers are keywords that you add to those definitions to change their meanings. Java language has a wide variety of modifiers, including the following : \n\n − Java Access Modifiers\n\n - Non Access Modifiers\n\n To use a modifier, you include its keyword in the definition of a class, method, or variable. The modifier precedes the rest of the statement, as in the following example.\n\n <b>Example</b>\n\n</string>
    <string name="modifiers_2">public class className {\n
        \t// …\n
        \t}\n
        \tprivate boolean myFlag;\n
        \tstatic final double weeks = 9.5;\n
        \tprotected static final int BOXWIDTH = 42;\n
        \tpublic static void main(String[] arguments) {\n
        \t// body of method\n
        }</string>
    <string name="modifiers_3">Access Control Modifiers</string>
    <string name="modifiers_4">Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are : \n\n − Visible to the package, the default. No modifiers are needed.\n - Visible to the class only (private).\n - Visible to the world (public).\n - Visible to the package and all subclasses (protected).\n\n</string>
    <string name="modifiers_5">Non-Access Modifiers</string>
    <string name="modifiers_6">Java provides a number of non-access modifiers to achieve many other functionality.\n\n - The static modifier for creating class methods and variables.\n\n - The final modifier for finalizing the implementations of classes, methods, and variables.\n\n - The abstract modifier for creating abstract classes and methods.\n\n - The synchronized and volatile modifiers, which are used for threads.\n\n</string>
    <string name="decision_1">Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.\n\n Following is the general form of a typical decision making structure found in most of the programming languages −</string>
    <string name="decision_3">Java programming language provides following types of decision making statements. Click the following links to check their detail.</string>
    <string name="decision_5">The ? : Operator</string>
    <string name="decision_6">We have covered <b>conditional operator ? :</b> in the previous chapter which can be used to replace <b>if…else</b> statements. It has the following general form −</string>
    <string name="decision_7">Exp1 ? Exp2 : Exp3;</string>
    <string name="decision_8">Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.\n\n To determine the value of the whole expression, initially exp1 is evaluated.\n\n - If the value of exp1 is true, then the value of Exp2 will be the value of the whole expression.\n\n - If the value of exp1 is false, then Exp3 is evaluated and its value becomes the value of the entire expression.\n\n</string>
    <string name="regular_1">Java provides the java.util.regex package for pattern matching with regular expressions. Java regular expressions are very similar to the Perl programming language and very easy to learn.\n\n A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. They can be used to search, edit, or manipulate text and data.\n\n The java.util.regex package primarily consists of the following three classes: \n\n − <b>Pattern Class</b> − A Pattern object is a compiled representation of a regular expression. The Pattern class provides no public constructors. To create a pattern, you must first invoke one of its public static <b>compile() </b>methods, which will then return a Pattern object. These methods accept a regular expression as the first argument.\n\n - <b>Matcher Class</b> − A Matcher object is the engine that interprets the pattern and performs match operations against an input string. Like the Pattern class, Matcher defines no public constructors. You obtain a Matcher object by invoking the <b>matcher()</b> method on a Pattern object.\n\n - <b>PatternSyntaxException</b> − A PatternSyntaxException object is an unchecked exception that indicates a syntax error in a regular expression pattern.\n</string>
    <string name="regular_2">Capturing Groups</string>
    <string name="regular_4"><![CDATA[Capturing groups are a way to treat multiple characters as a single unit. They are created by placing the characters to be grouped inside a set of parentheses. For example, the regular expression (dog) creates a single group containing the letters \"d\", \"o\", and \"g\".\n\n

Capturing groups are numbered by counting their opening parentheses from the left to the right. In the expression ( ( A ) ( B ( C ) ) ), for example, there are four such groups : \n\n

- ( ( A )( B( C ) ) )\n
- ( A )\n
- ( B ( C ) )\n
- ( C )\n\n
To find out how many groups are present in the expression, call the groupCount method on a matcher object. The groupCount method returns an int showing the number of capturing groups present in the matcher's pattern.\n\n

There is also a special group, group 0, which always represents the entire expression. This group is not included in the total reported by groupCount.\n\n

        <b>Example</b>\n\n

Following example illustrates how to find a digit string from the given alphanumeric string −\n\n]]></string>
    <string name="regular_44">import java.util.regex.Matcher;\n
import java.util.regex.Pattern;\n

\tpublic class RegexMatches {\n

   \tpublic static void main( String args[] ) {\n
     \t // String to be scanned to find the pattern.\n
      \tString line = \"This order was placed for QT3000! OK?\";\n
      \tString pattern = \"(.*)(\\d+)(.*)\";\n

     \t // Create a Pattern object\n
      \tPattern r = Pattern.compile(pattern);\n

     \t // Now create matcher object.\n
      \tMatcher m = r.matcher(line);\n
      \tif (m.find( )) {\n
         \tSystem.out.println(\"Found value: \" + m.group(0) );\n
         \tSystem.out.println(\"Found value: \" + m.group(1) );\n
        \t System.out.println(\"Found value: \" + m.group(2) );\n
      \t}else {\n
        \t System.out.println(\"NO MATCH\");\n
      \t}\n
  \t }\n
}</string>
    <string name="regular_5">This will produce the following result −\n\n <b>Output</b>\n\n</string>
    <string name="regular_6">Found value: This order was placed for QT3000! OK?\n Found value: This order was placed for QT300\n Found value: 0\n</string>
    <string name="regular_8">Here is the table listing down all the regular expression metacharacter syntax available in Java −\n\n</string>
    <string name="regular_12">Methods of the Matcher Class</string>
    <string name="regular_13">Here is a list of useful instance methods −</string>
    <string name="regular_17">For more on Regular Expressions, visit https://www.tutorialspoint.com/java/java_regular_expressions.htm</string>
    <string name="see_program">SEE PROGRAM</string>
    <string name="des_1_programs">A simple example of using for loops to calculate factorial. Uses the built in int data type so only good to 13!</string>
    <string name="program_copied">Program Copied to Clipboard</string>
    <string name="listing_java_1"><![CDATA[
 \tpublic class Factorial {\n

    \tpublic static void main(String[] args) {\n

        \tint num = 10;\n
        \tlong factorial = 1;\n
        \tfor(int i = 1; i <= num; ++i)\n
        \t{\n
            \t// factorial = factorial * i;\n
           \t factorial *= i;\n
        \t}\n
        \tSystem.out.printf("Factorial of %d = %d", num, factorial);\n
    \t}\n
\t}\n

]]></string>
    <string name="listing_java_5"><![CDATA[
    import java.math.BigInteger;
     import java.util.Random;
       public class PrimeEx {
         \t/** \t * @param args \t */
         \tpublic static void main(String[] args) {
         \t\tprintTest(10, 4); \t\tprintTest(2, 2);
         \t\tprintTest(54161329, 4);
         \t\tprintTest(1882341361, 2);
          \t\tprintTest(36, 9);
          \t\tSystem.out.println(isPrime(54161329) + \" expect false\");
          \t\tSystem.out.println(isPrime(1882341361) + \" expect true\");
          \t\tSystem.out.println(isPrime(2) + \" expect true\");
          \t\tint numPrimes = 0;
          \t\tStopwatch s = new Stopwatch();
          \t\ts.start();
          \t\tfor(int i = 2; i < 10000000; i++) {
                     \t\t\tif(isPrime(i))
                      {
                     \t\t\t\tnumPrimes++;
                     \t\t\t} \t\t
                     }
                     \t\ts.stop();
                     \t\tSystem.out.println(numPrimes + \" \" + s);
                      \t\ts.start();
                       \t\tboolean[] primes = getPrimes(10000000);
                       \t\tint np = 0;
                        \t\tfor(boolean b : primes) \t\t\tif(b) \t\t\t\tnp++;
                         \t\ts.stop();
                          \t\tSystem.out.println(np + \" \" + s);
                            \t\tSystem.out.println(new BigInteger(1024, 10, new Random()));
                             \t}
                  \tpublic static boolean[] getPrimes(int max) {
                   \t\tboolean[] result = new boolean[max + 1];
                    \t\tfor(int i = 2; i < result.length; i++) \t\t\tresult[i] = true;
                     \t\tfinal double LIMIT = Math.sqrt(max);
                      \t\tfor(int i = 2; i <= LIMIT; i++) { \t\t\tif(result[i]) {
                            \t\t\t\t// cross out all multiples;
                             \t\t\t\tint index = 2 * i;
                              \t\t\t\twhile(index < result.length){
                               \t\t\t\t\tresult[index] = false;
                                \t\t\t\t\t index += i;
                                 \t\t\t\t} \t\t\t} \t\t} \t\treturn result;
                                 \t
                                 }
                   \tpublic static void printTest(int num, int expectedFactors) {
                        \t\tStopwatch st = new Stopwatch();
                         \t\tst.start(); \t\tint actualFactors = numFactors(num);
                          \t\tst.stop();
                           \t\tSystem.out.println(\"Testing \" + num + \" expect \" + expectedFactors + \", \" + \t\t\t\t\"actual \" + actualFactors);
                             \t\tif(actualFactors == expectedFactors) \t\t\tSystem.out.println(\"PASSED\");
                                   \t\telse \t\t\tSystem.out.println(\"FAILED\");
                                   \t\tSystem.out.println(st.time());
                                    \t}

                    \t// pre: num >= 2
                     \tpublic static boolean isPrime(int num) {
                           \t\tassert num >= 2 : \"failed precondition. num must be >= 2. num: \" + num;
                            \t\tfinal double LIMIT = Math.sqrt(num);
                             \t\tboolean isPrime = (num == 2) ? true : num % 2 != 0;
                              \t\tint div = 3;
                               \t\twhile(div <= LIMIT && isPrime) {
                                    \t\t\tisPrime = num % div != 0;
                                     \t\t\tdiv += 2; \t\t} \t\treturn isPrime;
                                        \t}
                                \t// pre: num >= 2 \tpublic static int numFactors(int num) {
                                         \t\tassert num >= 2 : \"failed precondition. num must be >= 2. num: \" + num;
                                          \t\tint result = 0;
                                           \t\tfinal double SQRT = Math.sqrt(num);
                                            \t\tfor(int i = 1; i < SQRT; i++) {
                                                  t\t\tif(num % i == 0) {
                                                       \t\t\t\tresult += 2;
                                                     \t\t\t
                                                  }
                                                  \t\t}
                                              \t\tif(num % SQRT == 0) \t\t\tresult++;
                                                   \t\treturn result;
                                                         \t}
                                                    }]]></string>

    <string name="listing_java_2">public class StringExample{\n
        public static void main(String[] args)\n
	{\n
        String s1 = "Computer Science";\n
		int x = 307;\n
		String s2 = s1 + " " + x;\n
		String s3 = s2.substring(10,17);\n
		String s4 = "is fun";\n
		String s5 = s2 + s4;\n

		System.out.println("s1: " + s1);\n
		System.out.println("s2: " + s2);\n
		System.out.println("s3: " + s3);\n
		System.out.println("s4: " + s4);\n
		System.out.println("s5: " + s5);\n

		//showing effect of precedence\n

		x = 3;\n
		int y = 5;\n
		String s6 = x + y + "total";\n
		String s7 = "total " + x + y;\n
		String s8 = " " + x + y + "total";\n
		System.out.println("s6: " + s6);\n
		System.out.println("s7: " + s7);\n
		System.out.println("s8: " + s8);\n
	}\n
}\n

    </string>
    <string name="listing_java_3"><![CDATA[public class BinaryConverter {\n

    public static void main(String[] args){\n
        for(int i = -5; i < 33; i++){\n
            System.out.println(i + ": " + toBinary(i));\n
            System.out.println(i);\n
            //always another way\n
            System.out.println(i + ": " + Integer.toBinaryString(i));\n
        }\n
    }\n

    /*\n
     * pre: none\n
     * post: returns a String with base10Num in base 2\n
     */\n
    public static String toBinary(int base10Num){\n
        boolean isNeg = base10Num < 0;\n
        base10Num = Math.abs(base10Num);\n
        String result = "";\n

        while(base10Num > 1){\n
            result = (base10Num % 2) + result;\n
            base10Num /= 2;\n
        }\n
        assert base10Num == 0 || base10Num == 1 : "value is not <= 1: " + base10Num;\n

        result = base10Num + result;\n
        assert all0sAnd1s(result);\n

        if( isNeg )\n
            result = "-" + result;\n
        return result;\n
    }\n

    /*\n
     * pre: cal != null\n
     * post: return true if val consists only of characters 1 and 0, false otherwise\n
     */\n
    public static boolean all0sAnd1s(String val){\n
        assert val != null : "Failed precondition all0sAnd1s. parameter cannot be null";\n
        boolean all = true;\n
        int i = 0;\n
        char c;\n

        while(all && i < val.length()){\n
            c = val.charAt(i);\n
            all = c == '0' || c == '1';\n
            i++;\n
        }\n
        return all;\n
    }\n
}\n
]]></string>
    <string name="listing_java_4"><![CDATA[//sample code to write 100 random ints to a file, 1 per line\n

import java.io.PrintStream;\n
import java.io.IOException;\n
import java.io.File;\n

import java.util.Random;\n

public class WriteToFile\n
{\n	public static void main(String[] args)\n
	{\n	try\n
		{\n	PrintStream writer = new PrintStream( new File("randInts.txt"));\n
			Random r = new Random();\n
			final int LIMIT = 100;\n

			for(int i = 0; i < LIMIT; i++)\n
			{	\nwriter.println( r.nextInt() );\n
			}\n
			writer.close();\n
		}\n
		catch(IOException e)\n
		{\n	System.out.println("An error occured while trying to write to the file");\n
		}\n
	}\n
}]]></string>
    <string name="listing_java_6"><![CDATA[import java.io.File;\n
import java.io.FileNotFoundException;\n
import java.util.ArrayList;\n
import java.util.HashMap;\n
import java.util.Iterator;\n
import java.util.Map;\n
import java.util.Scanner;\n

import javax.swing.JFileChooser;\n
import javax.swing.UIManager;\n


public class WordCount {\n

    public static void main(String[] args) {\n
        countWordsViaGUI();\n
    }\n


    // allow user to pick file to exam via GUI.\n
    // allow multiple picks\n
    public static void countWordsViaGUI() {\n
        setLookAndFeel();\n
        try {\n
            Scanner key = new Scanner(System.in);\n
            do {\n
                System.out.println("Opening GUI to choose file.");\n
                Scanner fileScanner = new Scanner(getFile());\n
                Stopwatch st = new Stopwatch();\n
                st.start();\n
                ArrayList<String> words = countWordsWithArrayList(fileScanner);\n
                st.stop();\n
                System.out.println("time to count: " + st);\n
                System.out.print("Enter number of words to display: ");\n
                int numWordsToShow = Integer.parseInt(key.nextLine());\n
                showWords(words, numWordsToShow);\n
                fileScanner.close();\n
                System.out.print("Perform another count? ");\n
            } while(key.nextLine().toLowerCase().charAt(0) == \'y\');\n
            key.close();\n
        }\n
        catch(FileNotFoundException e) {\n
            System.out.println("Problem reading the data file. Exiting the program." + e);\n
        }\n
    }\n


    // determine distinct words in a file using an array list\n
    private static ArrayList<String> countWordsWithArrayList(Scanner fileScanner) {\n


        System.out.println("Total number of words: " + numWords);\n
        System.out.println("number of distincy words: " + result.size());\n
        return result;\n
    }\n


    // determine distinct words in a file and frequency of each word with a Map\n
    private static Map<String, Integer> countWordsWithMap(Scanner fileScanner) {\n


        System.out.println("Total number of words: " + numWords);\n
        System.out.println("number of distincy words: " + result.size());\n
        return result;\n
    }\n


    private static void showWords(ArrayList<String> words, int numWordsToShow) {\n
        for(int i = 0; i < words.size() && i < numWordsToShow; i++)\n
            System.out.println(words.get(i));\n
    }\n


    private static void showWords(Map<String, Integer> words, int numWordsToShow) {\n



    }\n


    // perform a series of experiments on files. Determine average time to\n
    // count words in files of various sizes\n
    private static void performExp() {\n
        String[] smallerWorks = {"smallWords.txt", "2BR02B.txt", "Alice.txt", "SherlockHolmes.txt"};\n
        String[] bigFile = {"ciaFactBook2008.txt"};\n
        timingExpWithArrayList(smallerWorks, 50);\n
        timingExpWithArrayList(bigFile, 3);\n
        timingExpWithMap(smallerWorks, 50);\n
        timingExpWithMap(bigFile, 3);\n
    }


    // pre: titles != null, elements of titles refer to files in the\n
    // same path as this program, numExp >= 0\n
    // read words from files and print average time to cound words.\n
    private static void timingExpWithMap(String[] titles, int numExp) {\n
        try {\n
            double[] times = new double[titles.length];\n
            final int NUM_EXP = 50;\n
            for(int i = 0; i < NUM_EXP; i++) {\n
                for(int j = 0; j < titles.length; j++) {\n
                    Scanner fileScanner = new Scanner(new File(titles[j]));\n
                    Stopwatch st = new Stopwatch();\n
                    st.start();\n
                    Map<String, Integer> words = countWordsWithMap(fileScanner);\n
                    st.stop();\n
                    System.out.println(words.size());\n
                    times[j] += st.time();\n
                    fileScanner.close();\n
                }\n
            }\n
            for(double a : times)\n
                System.out.println(a / NUM_EXP);\n
        }\n
        catch(FileNotFoundException e) {\n
            System.out.println("Problem reading the data file. Exiting the program." + e);\n
        }\n
    }\n


    // pre: titles != null, elements of titles refer to files in the\n
    // same path as this program, numExp >= 0\n
    // read words from files and print average time to cound words.\n
    private static void timingExpWithArrayList(String[] titles, int numExp) {\n
        try {\n
            double[] times = new double[titles.length];\n
            for(int i = 0; i < numExp; i++) {\n
                for(int j = 0; j < titles.length; j++) {\n
                    Scanner fileScanner = new Scanner(new File(titles[j]));\n
                    Stopwatch st = new Stopwatch();\n
                    st.start();\n
                    ArrayList<String> words = countWordsWithArrayList(fileScanner);\n
                    st.stop();\n
                    times[j] += st.time();\n
                    fileScanner.close();\n
                }\n
            }
            for(int i = 0; i < titles.length; i++)\n
                System.out.println("Average time for " + titles[i] + ": " + (times[i] / numExp));\n
        }\n
        catch(FileNotFoundException e) {\n
            System.out.println("Problem reading the data file. Exiting the program." + e);\n
        }\n
    }\n


    // try to set look and feel to same as system\n
    private static void setLookAndFeel() {\n
        try {\n
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n
        }\n
        catch(Exception e) {\n
            System.out.println("Unable to set look at feel to local settings. " +\\n
            "Continuing with default Java look and feel.");\n
        }\n
    }\n


    /** Method to choose a file using a window.\n
     * @return the file chosen by the user. Returns null if no file picked.\n
     */\n
    private static File getFile() {\n
        // create a GUI window to pick the text to evaluate\n
        JFileChooser chooser = new JFileChooser(".");\n
        chooser.setDialogTitle("Select File To Count Words:");\n
        int retval = chooser.showOpenDialog(null);\n
        File f =null;\n
        chooser.grabFocus();\n
        if (retval == JFileChooser.APPROVE_OPTION)\n
            f = chooser.getSelectedFile();\n
        return f;\n
    }\n
}]]>
    </string>
    <string name="set_6">Questions Set 6 (Regular Expressions)\n\n\n\n\n</string>
    <string name="help_section">Help</string>
    <string name="help_notes">Welcome to my Java programming tutorial App.The app is divided into six different sections listed below:\n\n
    \t <b>Java Basic section</b> : Here you will find tutorial notes related to the Basic concepts of java programming (Variables, Strings , Characters, Data types, Arrays, Loops, etc).\n\n
    \t <b>Java Advanced section</b> :  Here you will find tutorial notes related to the Advanced concepts of java programming (Constructors, Regular Expressions,Modifiers types etc).\n\n
    \t <b>Questions section</b> : Here you will presented with questions to answer with respected to what you have learned in java. Most questions are MCQ\'s. There\'s a trophy mechanism where you unlock a link to our next app with 3 gold trophies obtained when answering questions.\n\n
    \t <b>Sample Programs section</b> : View our selected sample programs which solve a particular scenario. Users can also copy each written code to clipboard and use them outside the app.\n\n
    \t <b>Share section</b> : Love this app share with friends and obtain their feedback related to  the app. Click on share section and choose which sharing method to use.\n\n
    \t <b>Help section</b> : Obtain help and notes related to  this App.\n\n
    </string>
    <string name="listing_java_7"><![CDATA[// Java program to illustrate for loop.
    public class forLoopDemo  {\n
       \tpublic static void main(String args[])\n
       \t{  \t\t// for loop begins when x=2\n
       \t\t// and runs till x <=4\n
       \t\tfor (int x = 2; x <= 4; x++)\n
          \t\t\tSystem.out.println(\"Value of x:\" + x);\n

          \tint z = 1; \n

       \t // Exit when z becomes greater than 4 \n
        \twhile (z <= 4) \n
        \t{ \n
            \tSystem.out.println(\"Value of z:\" + z);\n

            \t// Increment the value of z for \n
           \t // next iteration \n
           \t z++; \n
       \t } \n

           \t}\n
         }]]></string>

</resources>
